
#识别+抓取+放置

import numpy as np
import cv2
from airbot_py.airbot_play import AirbotPlay
import time


#启动机械臂
robot =AirbotPlay(port=50001)
#robot.calibrate_robot()#需要手动恢复到位置
#time.sleep(5)
#robot.calibrate_confirm()

robot.launch_robot()#启动机械臂，到预定的姿态
print("机械臂已启动，等待操作...")

#初始化所有的原子操作
def putdown_chuandi_1():#step1:放置船底1
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.10600452660657729, -0.28137941630409175, 0.09339445700315507],
                    [0.10703643438912142, 0.6661392765515448, -0.1733540130939062, 0.7174608366265618]],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.07529128406201442, -0.2762156417297548, 0.006848397479716495],
                    [0.10142599774134581, 0.6822183388682139, -0.18119476101563164, 0.7010416276331641]],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.08640471643279249, -0.2764049210144885, 0.06532722975718788],
                    [0.11109034870482669, 0.6647920222344348, -0.18425054848526493, 0.7153755915468252]],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)
def putdown_chuandi_2():  # step2: 放置船底2
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.08510951057327745, -0.2704613754754595, 0.09443619851833221],
                    [0.08211453128051205, 0.6759096886988233, -0.16605861828009355, 0.7133216888406998]],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.07992490730946966, -0.2748574720169932, 0.036396136230852555],
                    [0.0590492118001955, 0.6905022353193182, -0.14565250579640268, 0.7060490076191807]],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.07855968006022582, -0.27080195909912824, 0.08994613937592921],
                    [0.059520042994781606, 0.6994727884110965, -0.1217861355225794, 0.701686055119226]],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)  # 等待2秒
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        time.sleep(2)  # 等待2秒
def putdown_changfangti_left():
    # step3: 放置长方体绿色左
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.023380088656850612, -0.25763730564758625, 0.13045553049760808],
                     [0.11754857971894515, 0.689311865447952, -0.1531815528638747, 0.698259905351106]],
            "end": 0  # 合上夹爪
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.027482581026536015, -0.2591662014929471, 0.05390455492120255],
                     [0.08420736757894921, 0.7107740573892686, -0.16340713136659815, 0.6789753073612915]],
            "end": 1  # 打开夹爪
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.02482774010477798, -0.2549094458993449, 0.10430940770663535],
                     [0.09223366392579646, 0.7166158676076116, -0.15628512965721206, 0.6734460689467585]],
            "end": 1  # 打开夹爪
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)  # 等待2秒
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        time.sleep(2)  # 等待2秒


def putdown_changfangti_right():
    # step4: 放置长方体绿色右
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.1312014392363926, -0.2933200751862163, 0.12115566520435281],
                     [0.06904552214633984, 0.6863173282602495, -0.14033359571014628, 0.7102870706385651]],
            "end": 0  # 合上夹爪
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.12646399256890495, -0.286837218430644, 0.05687123411249201],
                     [0.07490020660572032, 0.6943184015537953, -0.13180932299402387, 0.7035184565354776]],
            "end": 1  # 打开夹爪
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.12569600615980608, -0.27337803034706315, 0.1342190944030367],
                     [0.07514927257502269, 0.6874603776575168, -0.12790830119513047, 0.7109080689286102]],
            "end": 1  # 打开夹爪
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)  # 等待2秒
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        time.sleep(2)  # 等待2秒
def putdown_fangkuai_1():  # 放置方块1
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.02478883256591732, -0.25779442730809304, 0.08352319534805897],
                     [0.10953118187178915, 0.6835103887326567, -0.18215858961045478, 0.6983084683171413]],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.024250001428370072, -0.25418031275135095, 0.07126915252528584],
                     [0.1117459700142001, 0.680018429464678, -0.1928832729422676, 0.698486805024302]],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.01795834974858313, -0.250005412769554, 0.12782906394225238],
                     [0.12456987884236599, 0.6935122214568774, -0.18114155805716864, 0.6860837266105116]],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)
def putdown_fangkuai_2():  # step1: 放置方块2
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.12536116082801518, -0.2865467298811373, 0.100085903166961],
                     [0.09159035866912739, 0.6497054467164474, -0.15338652154061655, 0.7388955364024826]],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.12170497235962262, -0.2845110391684993, 0.07031793876650816],
                     [0.10172609160019667, 0.6713594524362045, -0.17336948892614015, 0.7133521628352978]],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.11990954832519736, -0.28049987887980415, 0.10138922726099706],
                     [0.10498891182293318, 0.6784510458932119, -0.16123470180581226, 0.7090027345886858]],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)


def putdown_fangkuai_3():  # step2: 放置方块3
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.026488114041937204, -0.2543193377251229, 0.10921629978345337],
                     [0.11867892048162036, 0.6798555582415541, -0.2238449416274258, 0.6881897818692143]],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.023739482555946732, -0.2520333568493613, 0.09484184076675611],
                     [0.09819380916357695, 0.6929311677554562, -0.19520441955677442, 0.6870950495968591]],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.03616612313298626, -0.2573763519961195, 0.158565690131975],
                     [0.09244833279704533, 0.6753026297876757, -0.19617362624344628, 0.7049365732683991]],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)


def putdown_fangkuai_4():  # step3: 放置方块4
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [[0.12734202115376525, -0.2844071711926759, 0.11053990131022179],
                     [0.09212239396373455, 0.6534110907104117, -0.18404135204674657, 0.7284889785053901]],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [[0.12822445321908174, -0.28559189009307306, 0.09377212674411234],
                     [0.08922019378613145, 0.6536507452975006, -0.18184275680732054, 0.7291869938428011]],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [[0.12547665462435886, -0.279230753784262, 0.14086718039679783],
                     [0.09341466253878222, 0.6579180399550713, -0.17597469288133105, 0.7262578474548583]],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)



def putdown_fangkuai_5():  # step1: 放置方块5
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [
                [0.0295163085299452, -0.2607019411643249, 0.1405130850736588],
                [0.12957428216847147,  0.666165051695202, -0.2481116992864202, 0.6912851900465244]
            ],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [
                [0.030435685231711196, -0.25865114414149837, 0.11907524274059803],
                [0.1421240565620587,  0.6331254039242126, -0.24894375702827043, 0.7190131996624243]
            ],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [
                [0.030631497038035003, -0.2557817560382853, 0.1528202480227226],
                [0.14316705669817065,  0.6380798131365133, -0.23579582983265063, 0.7188585901118433]
            ],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)


def putdown_fangkuai_6():  # step2: 放置方块6
    # 定义所有的目标姿态和夹爪状态
    poses = [
        # 第一组姿态（合上夹爪）
        {
            "pose": [
                [0.12606768399875756, -0.2813635449817288, 0.15045861430851326],
                [0.14461679649012404,  0.6521488407001278, -0.24081678232433681, 0.7041272250789391]
            ],
            "end": 0  # 夹爪状态：合上
        },
        # 第二组姿态（打开夹爪）
        {
            "pose": [
                [0.1267779057711837, -0.28338221177479167, 0.1192374730046549],
                [0.11764153988433368,  0.6601338637035022, -0.21658833792307886, 0.7095584838202186]
            ],
            "end": 1  # 夹爪状态：打开
        },
        # 第三组姿态（打开夹爪）
        {
            "pose": [
                [0.1256379811138429, -0.2817551535731534, 0.15681002310480113],
                [0.12020688965731,  0.6619596980021524, -0.21595214436342688, 0.7076187767750745]
            ],
            "end": 1  # 夹爪状态：打开
        }
    ]

    # 使用for循环遍历每组目标姿态
    for pose_info in poses:
        # 设置目标姿态
        robot.set_target_pose(pose_info["pose"])
        time.sleep(2)
        # 设置夹爪状态
        robot.set_target_end(pose_info["end"])
        # 等待2秒
        time.sleep(2)
print("原子操作初始化完成！")

list_1 = ['bridge_back',  'bridge_vertical', 'cuboid_vertical', 'blue_cube','blue_cube','blue_cube','blue_cube','blue_cube']


def get_usbcam_img():
    cap = cv2.VideoCapture(2)# 打开摄像头 (通常是 USB 摄像头)
    if not cap.isOpened():  # 检查摄像头是否打开成功
        print("无法打开摄像头")
    else:
        frame_count = 0  # 帧计数器

        while True:
            ret, frame = cap.read()
            
            if not ret:
                print("无法读取帧")
                break

            frame_count += 1
            
            if frame_count < 4:
                # 丢掉前三帧
                continue
            elif frame_count == 4:
                # 捕获到第四帧，保存
                cv2.imwrite("/home/moss/桌面/第二阶段 第四步/1.jpg", frame)
                print("已保存第四帧")
                break  # 只保存第四帧，之后停止捕获

        # 释放摄像头
        cap.release()
def eye2hand(X_im=160, Y_im=120):
    '''
    输入目标点在图像中的像素坐标，转换为机械臂坐标
    '''
    # 整理两个标定点的坐标
    cali_1_im = [189, -20]                       # 左下角，第一个标定点的像素坐标，要手动填！
    cali_1_mc = [0.15048333214501958, 0.14492410443316445]              # 左下角，第一个标定点的机械臂坐标，要手动填！
    cali_2_im = [415, -385.8]                         # 右上角，第二个标定点的像素坐标
    cali_2_mc = [0.36309537246195145, -0.17244496142580726]
    X_cali_im = [cali_1_im[0], cali_2_im[0]]     # 像素坐标
    X_cali_mc = [cali_1_mc[0], cali_2_mc[0]]     # 机械臂坐标

    X_mc = np.interp(X_im, X_cali_im, X_cali_mc)

    Y_cali_im = [cali_2_im[1], cali_1_im[1]]     # 像素坐标，先小后大
    Y_cali_mc = [cali_2_mc[1], cali_1_mc[1]]     # 机械臂坐标，先大后小

    Y_mc = np.interp(Y_im, Y_cali_im, Y_cali_mc)

    return X_mc, Y_mc

s=0

try:#硬件操作机械臂
    for gola_jimu in list_1:
        #=======================到达观测的位置=======================
        guance_point_pose=[[0.1924331452871464, -0.001442284936627222, 0.19069909075229122], [-0.01808831615926593,  0.6582602236943412,  0.010412901701826485,  0.752501071227508]]
        robot.set_target_pose(guance_point_pose)
        robot.set_target_end(1)
        time.sleep(2)
        #=======================拍摄图片=======================
        get_usbcam_img()
        #========================把拍摄的图片传入模型 识别,打印结果=======================
        from test2 import DetectionProcessor
        detector = DetectionProcessor(# 初始化检测器
            r'/home/moss/桌面/第二阶段 第四步/1_best.pt'
        )
        # 处理图像
        result = detector.process(
            r'/home/moss/桌面/第二阶段 第四步/1.jpg'
        )
        # 输出结果
        print("\n".join(result['log_info']))
        print("\n结构化数据:")
        for det in result['detections']:
            print(f"类别: {det['label']}")
            print(f"坐标范围: {det['bbox']}")
            print(f"框中心: {det['box_center']}")
            print(f"物体中心: {det['obj_center']}\n")

        #=======================把像素坐标转换成机械臂坐标=======================
        for det in result['detections']:
                if det['label'] == gola_jimu:
                    print("===要抓的物体像素坐标=======")
                    # 解包 obj_center 中的 x 和 y 坐标
                    x, y = det['obj_center']
                    
                    print(f"物体中心: ({x}, {y})\n")

        # 将 x 和 y 坐标传递给 eye2hand 函数
        X_pick_up,Y_pick_up=eye2hand(X_im=640-x ,Y_im=-(480-y))
        print("==============抓取坐标:{}{}================".format( X_pick_up,Y_pick_up))

        #抓取物体，提高
        print("移动目标物体的上方")
        pickup_point_pose=[[X_pick_up,Y_pick_up, 0.19069909075229122], [-0.01808831615926593,  0.6582602236943412,  0.010412901701826485,  0.752501071227508]]
        robot.set_target_pose(pickup_point_pose)
        time.sleep(3)
        robot.set_target_end(0.9)
        time.sleep(3)

        print("下降")
        pickup_point_pose=[[X_pick_up,Y_pick_up, 0.01], [-0.01808831615926593,  0.6582602236943412,  0.010412901701826485,  0.752501071227508]]
        robot.set_target_pose(pickup_point_pose)
        time.sleep(3)
        robot.set_target_end(0.1)
        time.sleep(3)

        print("上升")
        pickup_point_pose=[[X_pick_up,Y_pick_up, 0.20], [-0.01808831615926593,  0.6582602236943412,  0.010412901701826485,  0.752501071227508]]
        robot.set_target_pose(pickup_point_pose)
        time.sleep(3)
        robot.set_target_end(0.1)
        time.sleep(3)
        #放置物体
        if gola_jimu == 'bridge_back':
            putdown_chuandi_1()
        elif gola_jimu == 'bridge_vertical':
            putdown_chuandi_2()
        elif gola_jimu == 'cuboid_vertical' and s ==0 :#没有抓过长方体绿色就执行，下方的代码
            s=s+1
            putdown_changfangti_left()
        elif gola_jimu == 'cuboid_back' and s ==1:#执行过一次 长方体 就执行下面的代码
            s=s+1
            putdown_changfangti_right()
        elif gola_jimu == 'blue_cube' and i ==0 :#没有抓过方块就执行，下方的代码
            i=1
            putdown_fangkuai_1()
        elif gola_jimu == 'blue_cube' and i ==1:#执行过一次 方块 就执行下面的代码
            i=2
            putdown_fangkuai_2()
        elif gola_jimu == 'blue_cube' and i ==2:#执行过两次 方块 就执行下面的代码
            i=3
            putdown_fangkuai_3()
        elif gola_jimu == 'blue_cube'and i ==3:#执行过三次 方块 就执行下面的代码
            i=4
            putdown_fangkuai_4()
        elif gola_jimu == 'blue_cube' and i ==4:#执行过四次 方块 就执行下面的代码
            i=5
            putdown_fangkuai_5()
        elif gola_jimu == 'blue_cube' and i ==5:#执行过五次 方块 就执行下面的代码
            putdown_fangkuai_6()
        else:
            continue

        #到达观测的位置
        
except:
    pass

finally:
    #关闭机械臂
    robot.shutdown_robot()# 关闭机械臂
    #robot. shutdown()# 关闭机械臂
